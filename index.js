const readline = require('readline');
const axios = require('axios');
const fs = require('fs').promises;
const path = require('path');
const chalk = require('chalk');
const cleaneBackups = require('./modules/cleane');

//—Ç–æ—á–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Å–µ—Ä–≤–∏—Å–æ–º
const SERVICE_HOST = 'http://localhost:3000'; //https://jsonpostresqlbackuptoolservice.onrender.com 'http://localhost:3000'
const TOOL_CREATE_CONNECTION_END = SERVICE_HOST + '/createConnection';
const TOOL_RESERVE_COPY_END = SERVICE_HOST + '/createTableBackup';
const RESTORE_TABLES_END = SERVICE_HOST + '/restoreTables';
const RESTORE_DATA_END = SERVICE_HOST + '/restoreData';
const CLOSE_POOL_END = SERVICE_HOST + '/closeConnection';
const version = '1.0.0';

//–ø—É–∫–∏ –≤ —Ñ–∞–π–ª–æ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const dbSqlPath = 'sql/database.sql';
const backupDir = 'backup';

//—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ–æ–¥–∞ –≤—ã–≤–æ–¥–∞
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

//–ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
function getUserInput(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, (input) => {
      resolve(input);
    });
  });
}

//–Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
async function newConnection(){

    try{
        //–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const dbOptions = {}

        //–∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        dbOptions.host = await getUserInput(chalk.green('Enter database host: '));
        dbOptions.port = await getUserInput(chalk.green('Enter database port: '));
        dbOptions.database = await getUserInput(chalk.green('Enter database name: '));
        dbOptions.user = await getUserInput(chalk.green('Enter database user: '));
        dbOptions.password = await getUserInput(chalk.green('Enter database password: '));

        console.log('connection...');

        // –í—ã–ø–æ–ª–Ω–∏—Ç–µ POST-–∑–∞–ø—Ä–æ—Å –∫ localhost:1234 –Ω–∞ endpoint /createConnection
        await axios.post(TOOL_CREATE_CONNECTION_END, dbOptions);

        //–£—Å–ø–µ—à–Ω–æ
        console.log(chalk.green(`connected to ${dbOptions.database} successfuly ‚úÖ`));

        //—É—Å–ø–µ—Ö
        return true;

    }
    //–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∏—à–±–æ–∫
    catch(err){
        console.error(chalk.red("connection error: ", err.message));

        //–Ω–µ—É–¥–∞—á–∞
        return false;
    }
}

//—Ü–∏–∫–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
async function connectionLoop(){

    let lastCommand = 'reconnect', conResult;
    
    while(true){

        //–Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if(lastCommand === 'reconnect'){
            conResult = await newConnection();
        }

        //–ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if(!conResult){

            //–Ω–µ—É–¥–∞—á–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            console.log('Type "reconnect" to take new turn\nType "exit" to live');
            lastCommand = await getUserInput('next-command: ');

            //–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if(lastCommand === 'reconnect'){
                continue;
            }
            //–µ—Å–ª–∏ –≤—ã—Ö–æ–¥
            else if(lastCommand === 'exit'){
                throw false;
            }
            //–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
            else{
                console.log(chalk.red(`Undetected command: "${lastCommand}"`));
                continue;
            }
        }

        //–µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        return true;
    }
}

//—Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
async function createTableBackup(name){
    try{
        console.log('waiting...');
        let responseTable = await streamPostMethod(TOOL_RESERVE_COPY_END, {name});
        console.log(`INFO : creating ./backup/${name}.json file...`);

        // –∑–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞
        await fs.writeFile(`backup/${name}.json`, responseTable, 'utf8');
        console.log(chalk.green(`File ${name}.json created successfuly ‚úÖ`));

        return true;
    }
    //–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    catch(err){
        console.error(chalk.red('Error: ', err.message));
        return false;
    }
}

//—á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
async function readFileByPath(filePath) {
    const fileData = await fs.readFile(filePath, 'utf-8');
    return fileData;
}

//—á—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö json —Ñ–∞–π–ª–æ–≤
async function readAllJsonFilesInDirectory(directoryPath) {
    try {
        const files = await fs.readdir(directoryPath);
        const filesData = [];
        for (const file of files) {
            const filePath = path.join(directoryPath, file);
            const stat = await fs.stat(filePath);
            if (!stat.isDirectory() && file.endsWith('.json')) {
                // –ß–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .json
                const jsonContent = await fs.readFile(filePath, 'utf-8');
                filesData.push({
                    name: file.replace('.json', ''),
                    content: JSON.parse(jsonContent)
                });

                console.log(chalk.green(`Readed ${file}`));
            }
        }
        
        //—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ
        return filesData;

    } catch(err) {
        console.error(chalk.red('Reading file error:', err.message));
    }
}

//–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function restoreDatabase(){
    try{
        console.log(`reading ./${dbSqlPath}...`);
        const sql = await readFileByPath(dbSqlPath);
        console.log('File database.sql readed successfuly ‚úÖ\nExecuting...');
        await axios.post(RESTORE_TABLES_END, {sql});
        console.log(chalk.green('Database restored successfuly üéâüéâüéâ'));

    }catch(err){
        console.error(chalk.red("Restore database error:", err.message));
    }
}

//–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
async function restoreData(){
    try{
        console.log('Reading json buckups...');
        const backups = await readAllJsonFilesInDirectory(backupDir);
        console.log(`Readed ${backups.length} files.\nExecuting...`);
        await fillData(backups);
        console.log(chalk.green('Data restored successfuly üéâüéâüéâ'));

    }catch(err){
        console.error(chalk.red("Restore data error:", err.message));
    }
}

//–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function fillData(data){
    const jsonString = JSON.stringify(data);
    let resResult;
    await parseRequestText(jsonString, 1000, async(jsonStrPart, isEnd, index, lastIndex) => {
        resResult = await axios.post(RESTORE_DATA_END, {jsonStrPart, isEnd, index, lastIndex});
        console.log(`Posting... ${index}/${lastIndex}`);
    });

    console.log('Data sended ‚úÖ\nRestoring...');
    return resResult;
}

//–æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {

    //–ø—Ä–µ–¥—ã–¥—É—â–∞—è –∫–æ–º–∞–Ω–¥–∞
    let nextCommand = "help";
    let connected = false;

    while(true){

        //–æ—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ –∫–æ–º–º–∞–Ω–¥
        if(!connected){
            switch(nextCommand){

                //–ø–µ—Ä–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
                case "help":
                    console.log(`Type: "help" for show commands.\n"connect" for connect to database (to backup or restore)\n"cleane" for cleane crated json backups (need crated json tables backups)\n"exit" to live`);
                    break

                //–ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                case "connect": 
                    connected = await connectionLoop();
                    nextCommand = "help";
                    continue;

                //–ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                case "cleane": 
                    connected = await cleaneBackups();
                    nextCommand = "help";
                    continue;

                //–≤—ã—Ö–æ–¥
                case "exit":
                    throw false

                default: 
                    console.log(chalk.red(`Undetected command: "${nextCommand}", type "help" for show commands`));
                    break;
            }
        }
        //–µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
        else{
            switch(nextCommand){

                //–ø–µ—Ä–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
                case "help":
                    console.log(`Type: "help" for show commands.\n"backup" for create backup of table \n"restore database" for restore your database (need database.sql file without data in ./sql)\n"restore data" for restore your data (need restored database and exists .json backups of tables in ./backup)\n"cleane" for cleane crated json backups (need crated .json backups of tables )\n"reconnect" for new connection\n"exit" to live`);
                    break

                //–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è
                case "reconnect": 
                    //–ø—Ä–µ–¥—ã–¥—É—â–∞—è –∫–æ–º–∞–Ω–¥–∞
                    nextCommand = "connect";
                    connected = false;
                    continue;

                //–ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                case "cleane": 
                    connected = await cleaneBackups();
                    nextCommand = "help";
                    continue;

                //–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑—É
                case "backup": 
                    let tableName = await getUserInput("Enter table name for save: ");
                    await createTableBackup(tableName);
                    nextCommand = "help";
                    continue;

                //–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                case "restore database":
                    await restoreDatabase();
                    nextCommand = "help";
                    continue;

                //–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                case "restore data":
                    await restoreData();
                    nextCommand = "help";
                    continue;

                //–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                case "exit":
                    console.log('closing connection...');
                    await axios.post(CLOSE_POOL_END, {});
                    throw false

                default: 
                    console.log(chalk.red(`Undetected command: "${nextCommand}", type "help" for show commands`));
                    break;
            }
        }

        //—Å–ª–µ–¥—É—é—â–∞—è –∫–æ–º–∞–Ω–¥–∞
        nextCommand = await getUserInput("Enter command (without /): ");
        continue;
    }
  } 
  //–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  catch(err) {
    //–µ—Å–ª–∏ –æ–∏—à–±–∫–∞
    if(err instanceof Error){
        console.error(chalk.red('Error:', err.message));
    }
    
    //–≤—ã—Ö–æ–¥
    console.log(chalk.green('exit...'));
  }
  //–∑–∞–∫—Ä—ã—Ç—å –∫–æ–Ω—Å–æ–ª—å
  finally {
    rl.close();
  }
}

//–ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞
async function streamPostMethod(url, postData){
    //–∑–∞–ø—Ä–æ—Å post –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
    const response = await axios({
        method: 'post',
        data: postData,
        url,
        responseType: 'stream' // <--- —Å–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –ø–æ—Ç–æ–∫–æ–º
    });

    //–ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –≤ –∏—Ç–æ–≥–µ –¥–∞–Ω–Ω—ã–µ
    let data = '';

    //–ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –ø–æ—Ç–æ–∫–µ
    const resultStream = new Promise((resolve, reject) => {

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ç–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        response.data.on('data', (chunk) => {
            data += chunk;
        });
        
        //–æ–∫–æ–Ω—á–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞
        response.data.on('end', () => {
            resolve(data);
        });

        //–æ—à–∏–±–∫–∞ –ø–æ—Ç–æ–∫–∞
        response.data.on('error', (err) => {
            reject(err); // –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ Promise –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        });

    });

    //–¥–æ–∂–¥–∞—Ç—Å—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞
    const result = await resultStream;
    return result;
}

//—Ä–∞–∑–±–∏—Ç–∏–µ —Å—Ç—Ä–æ–∫–∏ json –Ω–∞ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ—Ä—Ü–∏—è–º–∏
async function parseRequestText(jsonString, length, callback){

    //–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
	let startAt = 0;
	let isEnd = false;
    let lastIndex = Math.floor(jsonString.length/length);
	
  //—Å–ª–µ–¥—É—é—â–∞—è —á–∞—Å—Ç—å
	async function next(start){
		if(start + length >= jsonString.length){
			isEnd = true;
		}
		//—Ç–µ–∫—É—â–∞—è —á–∞—Å—Ç—å
		let jsonStrPart = jsonString.slice(start, start + length);
        //—Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å
        let index = start/length;
		//—Ñ—É–Ω–∫—Ü–∏—è callback
        await callback(jsonStrPart, isEnd, index, lastIndex);
		//–ø—Ä–æ–≤–µ—Ä–∫–∞
		if(start + length < jsonString.length){
          //—Å–ª–µ–¥—É—é—â–∏–π –≤—ã–∑–æ–≤
          await next(start + length);
		}
	}
	
    //—Å–ª–µ–¥—É—é—â–∏–π –∏–Ω–¥–µ–∫—Å
	await next(startAt);
}

//–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±–µ—â–µ–Ω–∏–µ
console.log(chalk.green(`Advisor postgreSQL backup json tool v.${version}\n`));
main();